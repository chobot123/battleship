{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA;AAC6G;AACjB;AAC5F,8BAA8B,mFAA2B,CAAC,4FAAqC;AAC/F;AACA,6FAA6F,OAAO,sFAAsF,iFAAiF,mBAAmB;AAC9R;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;ACPvC;AAC6G;AACjB;AAC5F,8BAA8B,mFAA2B,CAAC,4FAAqC;AAC/F;AACA,6FAA6F,OAAO,2FAA2F,iFAAiF,mBAAmB;AACnS;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;ACP1B;;AAEb;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA,qDAAqD;AACrD;;AAEA;AACA,gDAAgD;AAChD;;AAEA;AACA,qFAAqF;AACrF;;AAEA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA,KAAK;AACL,KAAK;;;AAGL;AACA;AACA;AACA;;AAEA;;AAEA;AACA,sBAAsB,iBAAiB;AACvC;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,qBAAqB;AAC1C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV,sFAAsF,qBAAqB;AAC3G;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV,iDAAiD,qBAAqB;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV,sDAAsD,qBAAqB;AAC3E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;ACrGa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,cAAc;AACrE;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;;;;;;ACrBa;;AAEb;;AAEA;AACA;;AAEA,kBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;;AAEA;;AAEA,qBAAqB,6BAA6B;AAClD;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACvGa;;AAEb;AACA;;AAEA;AACA;AACA,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;ACtCa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACVa;;AAEb;AACA;AACA,cAAc,KAAwC,GAAG,sBAAiB,GAAG,CAAI;;AAEjF;AACA;AACA;AACA;;AAEA;;;;;;;ACXa;;AAEb;AACA;AACA;;AAEA;AACA,kDAAkD;AAClD;;AAEA;AACA,0CAA0C;AAC1C;;AAEA;;AAEA;AACA,iFAAiF;AACjF;;AAEA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA,aAAa;AACb;;AAEA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA,yDAAyD;AACzD,IAAI;;AAEJ;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACrEa;;AAEb;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;ACfA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,EAAE,OAAO;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,YAAY;AACvB;AACA;AACA;AACA;;;;;;;;;;;;;ACnEA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;UCTA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6CAAe,MAAM;;AC7BrB;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,cAAc,kBAAkB;AAChC;AACA;;AAEA;AACA;;AAEA;AACA,mCAAmC,KAAK;AACxC;;AAEA;AACA;AACA;AACA,kCAAkC,YAAY;AAC9C,gDAAgD,OAAO;AACvD;AACA;;;;AAIA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA;;AAEA;AACA;AACA,4CAA4C,qBAAqB;AACjE,8BAA8B,YAAY;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA;;AAEA;AACA;AACA,+CAA+C,qBAAqB;AACpE;AACA,6BAA6B,0BAA0B;AACvD;AACA;;AAEA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEgD;;;;;ACrFhD;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,CAAC;;AAED,sDAAe,YAAY;;;;AC/BmC;AACnB;AACI;;AAE/C;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;AAEA,uBAAuB;;AAEvB;AACA;AACA;;AAEA,oBAAoB;AACpB,0BAA0B;AAC1B,wBAAwB;AACxB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC,oBAAoB,YAAY;AAChC;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,gCAA6B;AAC7C;AACA,gBAAgB,6BAAkB,yCAAyC;AAC3E;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEoB;;;;ACjLpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,mBAAmB;;AAEnB;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,uBAAuB;AACvB,wCAAwC;AACxC;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAe,cAAc,EAAC;;;ACtRwB;AACZ;AAC1C,QAAQ,YAAY,EAAE,mBAAO,CAAC,GAAU;AACxC,QAAQ,aAAa,EAAE,mBAAO,CAAC,GAAU;;;AAGzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,QAAQ;AAChC,wBAAwB,gCAA6B;AACrD;AACA;;;;ACtBiC;AACK;;AAEtC;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,IAAI;AACZ,QAAQ,QAAQ;AAChB,KAAK;AACL;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B,uCAAuC,WAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,qBAAqB;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAe,SAAS;;ACxLxB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA,oCAAoC,wBAAwB;AAC5D;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAAe,IAAI;;AC5D0B;AACV;;AAEnC;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA,kBAAkB,SAAS;;AAE3B,oBAAoB,IAAI;AACxB,uBAAuB,IAAI;AAC3B,oBAAoB,IAAI;AACxB,sBAAsB,IAAI;AAC1B,sBAAsB,IAAI;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAAe,WAAW;;;AC3Ba;AACoB;AACE;AACR;AACb;AACU;;;AAGlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,MAAM;AAC5B,2BAA2B,qBAAW;AACtC;AACA,6BAA6B;AAC7B;AACA,qBAAqB,MAAM;AAC3B,0BAA0B,qBAAW;AACrC;;AAEA,IAAI,cAAc;AAClB,IAAI,WAAW;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6BAAkB,kBAAkB;AACpD,gBAAgB,6BAAkB,oBAAoB;;AAEtD;AACA;;AAEA;AACA;AACA;AACA,uCAAuC,mCAAmC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,gBAAgB,cAAc;AAC9B,uBAAuB,SAAS;AAChC;AACA;;;AAGA;;AAEA;AACA;AACA,gBAAgB,oBAAwB;AACxC,gBAAgB,6BAAkB,kBAAkB;AACpD,gBAAgB,6BAAkB,oBAAoB;AACtD;AACA,oBAAoB,cAAc;AAClC,2BAA2B,SAAS;AACpC;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;;;;;;;;;;;;;;;;;;;;;;;;;ACzFA,MAAkG;AAClG,MAAwF;AACxF,MAA+F;AAC/F,MAAkH;AAClH,MAA2G;AAC3G,MAA2G;AAC3G,MAAyM;AACzM;AACA;;AAEA;;AAEA,4BAA4B,6BAAmB;AAC/C,wBAAwB,0CAAa;;AAErC,uBAAuB,+BAAa;AACpC;AACA,iBAAiB,uBAAM;AACvB,6BAA6B,8BAAkB;;AAE/C,aAAa,kCAAG,CAAC,mBAAO;;;;AAImJ;AAC3K,OAAO,kDAAe,mBAAO,IAAI,iCAAc,GAAG,iCAAc,YAAY,EAAC;;;;;;ACzB7E,MAAkG;AAClG,MAAwF;AACxF,MAA+F;AAC/F,MAAkH;AAClH,MAA2G;AAC3G,MAA2G;AAC3G,MAA8M;AAC9M;AACA;;AAEA,IAAI,iBAAO;;AAEX,iBAAO,qBAAqB,6BAAmB;AAC/C,iBAAO,iBAAiB,0CAAa;;AAErC,MAAM,iBAAO,UAAU,+BAAa;AACpC;AACA,iBAAO,UAAU,uBAAM;AACvB,iBAAO,sBAAsB,8BAAkB;;AAE/C,IAAI,gBAAM,GAAG,kCAAG,CAAC,wBAAO,EAAE,iBAAO;;;;AAI+I;AAChL,OAAO,uDAAe,wBAAO,IAAI,sCAAc,GAAG,sCAAc,YAAY,EAAC;;;AC1BrB;AACf;AACb;AACI;;AAEhC;AACA,IAAI,IAAI;AACR,IAAI,QAAQ;AACZ,CAAC,I","sources":["webpack://battleship/./src/styles/main.css?a487","webpack://battleship/./src/styles/normalize.css?a628","webpack://battleship/./node_modules/css-loader/dist/runtime/api.js","webpack://battleship/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://battleship/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://battleship/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://battleship/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://battleship/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://battleship/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://battleship/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://battleship/./src/scripts/UI/boards.js","webpack://battleship/./src/scripts/UI/header.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/compat get default export","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/scripts/factory/player.js","webpack://battleship/./src/scripts/UI/renderShips/displayShips.js","webpack://battleship/./src/scripts/UI/instructions.js","webpack://battleship/./src/scripts/UI/renderShips/placeShips.js","webpack://battleship/./src/scripts/game_loop/computerAI.js","webpack://battleship/./src/scripts/UI/init.js","webpack://battleship/./src/scripts/game_loop/gameEnd.js","webpack://battleship/./src/scripts/factory/gameBoard.js","webpack://battleship/./src/scripts/factory/ship.js","webpack://battleship/./src/scripts/game_loop/createBoard.js","webpack://battleship/./src/scripts/game_loop/gameLoop.js","webpack://battleship/./src/styles/main.css?09bd","webpack://battleship/./src/styles/normalize.css?36ae","webpack://battleship/./src/index.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"// extracted by mini-css-extract-plugin\\nexport {};\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles/main.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"// extracted by mini-css-extract-plugin\\nexport {};\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles/normalize.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n\n      content += cssWithMappingToString(item);\n\n      if (needLayer) {\n        content += \"}\";\n      }\n\n      if (item[2]) {\n        content += \"}\";\n      }\n\n      if (item[4]) {\n        content += \"}\";\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n\n\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\"\\n\");\n  }\n\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n\n  var needLayer = typeof obj.layer !== \"undefined\";\n\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += \"}\";\n  }\n\n  if (obj.media) {\n    css += \"}\";\n  }\n\n  if (obj.supports) {\n    css += \"}\";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;","/**\n * @description           Creates the DOM boards for player and computer  \n * @returns { boards }    The DOM container holding both boards\n */\nconst makeBoards = () => {\n\n    const boards = document.createElement(\"div\");\n    boards.className = \"boards\";\n    \n    const  playerOne = document.createElement(\"div\");\n    const playerTwo = document.createElement(\"div\");\n    playerOne.className = 'playerOne';\n    playerTwo.className = 'playerTwo';\n    playerTwo.style.display = `none`;\n\n    const pOneBoard = document.createElement(\"div\");\n    const pTwoBoard = document.createElement(\"div\");\n    pOneBoard.className = `board one`;\n    pTwoBoard.className = `board two`;\n\n    const pOneBoardTitle = document.createElement(\"id\");\n    pOneBoardTitle.id = \"board-title\";\n    pOneBoardTitle.textContent = \"My Board\";\n\n    const pTwoBoardTitle = document.createElement(\"id\");\n    pTwoBoardTitle.id = \"board-title\";\n    pTwoBoardTitle.textContent = \"Computer Board\";\n\n\n    makeGrid(pOneBoard);\n    makeGrid(pTwoBoard);\n    playerOne.appendChild(pOneBoardTitle);\n    playerTwo.appendChild(pTwoBoardTitle);\n    playerOne.appendChild(pOneBoard);\n    playerTwo.appendChild(pTwoBoard);\n    boards.appendChild(playerOne);\n    boards.appendChild(playerTwo);\n\n    return boards;\n}\n\n/**\n * @description                     Creates cells for the board grid\n * \n * @param {DOMElement} thisBoard    Board DOM element\n */\nconst makeGrid = (thisBoard) => {\n    let j = 0;\n    for(let i = 0; i < 100; i++) {\n        if(i % 10 === 0 && i > 0){\n            j++;\n        }\n        let cell = document.createElement(\"div\");\n        cell.className = 'cell';\n        cell.innerHTML = `${j}${i % 10}`;\n        cell.style.color = \"rgba(0,0,0,0)\";\n        cell.style.userSelect = \"none\";\n        thisBoard.appendChild(cell);\n    }\n}\n\n/**\n * @description                 Changes opacity of the board \n * @param {DOMElement} board    Board DOM element\n */\nconst toggleBoardOpacity = (board) => {\n    board.classList.toggle(\"opacity\");\n}\n\nexport { makeBoards, toggleBoardOpacity }","/**\n * @description         Creates title of the page\n * @returns { title }   Title of game\n */\nconst makeTitle = () => {\n    const title = document.createElement(\"h1\");\n    title.id = \"title\";\n    title.innerHTML = \"Battleship\";\n    return title;\n}\n\nexport { makeTitle }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Factory Function\n * @description     Determine player turn and which board to attack\n * \n * @returns { myTurn, attack} \n */\nconst Player = () => {\n\n    //status of player turn\n    let myTurn = false;\n\n    /**\n     * \n     * @param {*} board The board object (see gameBoard)\n     * @param {*} x                     the x-coordinate\n     * @param {*} y                     the y-coordinate\n     * @returns board.receiveAttack     Sends an attack to the chosen board\n     */\n    const attack = (board, x, y) => {\n        myTurn = false;\n        return board.receiveAttack(x, y);\n    }\n\n    return {\n        myTurn,\n        attack\n    }\n}\n\nexport default Player;","/**\n * @description                 Creates a ship with length cells and with className name\n * @param {String} name         Name of ship\n * @param {Number} length       Length of ship\n * @returns { shipWrapper }     Ship element\n */\nconst displayShip = (name, length) => {\n\n        const shipWrapper = document.createElement(\"div\");\n        const ship = document.createElement(\"div\");\n\n        shipWrapper.appendChild(ship);\n        shipWrapper.className = `${name}-container`;\n        shipWrapper.style.display = `flex`;\n\n        ship.className = name;\n        ship.style.display = `grid`;\n        ship.style.minWidth = `40px`;\n        ship.style.minHeight = `${40 * length}px`;\n        ship.style.gridTemplateRows = `repeat(${length}, minmax(0, 40px))`;\n        ship.setAttribute(\"draggable\", \"true\");\n        ship.classList.add('vertical');\n\n\n\n        for(let i = 0; i < length; i++) {\n            let cell = document.createElement(\"div\");\n            cell.className = \"cell\";\n            cell.classList.add(\"ship\");\n            cell.innerHTML = i;\n            cell.style.color = \"transparent\";\n            ship.appendChild(cell);\n        }\n        return shipWrapper;\n}\n\n/**\n * @description                 Makes ship vertical in alignment by removing the class ('horizontal')\n *                              and adding the class ('vertical')\n * \n * @param {DOMElement} ship     Ship DOM element\n */\nconst makeVertical = (ship) => {\n\n    ship.classList.remove('horizontal');\n    ship.classList.add('vertical');\n    ship.style.gridTemplateRows = `repeat(${ship.children.length}, minmax(0,40px))`\n    ship.style.minHeight = `${40 * length}px`;\n    ship.style.minWidth = `40px`;\n    ship.style.gridTemplateColumns = \"\";\n}\n\n/**\n * @description                 Makes ship horizontal in alignment by removing the class ('vertical')\n *                              and adding the class ('horizontal')\n * \n * @param {DOMElement} ship     Ship DOM element\n */\nconst makeHorizontal = (ship) => {\n\n    ship.classList.remove('vertical');\n    ship.classList.add('horizontal');\n    ship.style.gridTemplateColumns = `repeat(${ship.children.length}, minmax(0,40px))`\n    ship.style.minHeight = `40px`;\n    ship.style.minWidth = `${40 * ship.children.length}px`;\n    ship.style.gridTemplateRows = \"\";\n}\n\n/**\n * @description                     Creates a container for all ships and appends all ships to said container\n * \n * @returns { shipsContainer }      DOM element containing all ships to place\n */\nconst getShips = () => {\n\n    const shipsContainer = document.createElement(\"div\");\n    shipsContainer.className = `ships-container`;\n\n    shipsContainer.appendChild(displayShip('carrier', 5));\n    shipsContainer.appendChild(displayShip('battleship', 4));\n    shipsContainer.appendChild(displayShip('cruiser', 3));\n    shipsContainer.appendChild(displayShip('submarine', 3));\n    shipsContainer.appendChild(displayShip('destroyer', 2));\n\n    return shipsContainer;\n}\n\nexport { getShips, makeHorizontal, makeVertical}\n","\n\n/**\n * Module\n * \n * @description                                     Creates instructions for when the player\n *                                                  is supposed to place ships and game objective afterwords\n * @returns { shipInstructions, gameInstructions }\n */\nconst instructions = (() => {\n\n    const instructions = document.createElement(\"div\");\n    instructions.className = \"instructions\";\n\n    const shipInstructions = () => {\n        instructions.textContent = \"Double Click a Ship to Change Orientation\";\n        return instructions;\n    }\n\n    const gameInstructions = () => {\n        instructions.textContent = \"Destroy the Enemy Ships\";\n        return instructions;\n    }\n\n    return {\n        shipInstructions,\n        gameInstructions,\n    }\n\n})();\n\nexport default instructions;","import { makeHorizontal, makeVertical } from \"./displayShips\";\nimport instructions from \"../instructions\";\nimport { toggleBoardOpacity } from \"../boards\";\n\n/**\n * @description                 Contains a series of event handlers that handles\n *                              orienting and placing the ships on the board DOM.\n *                              renderShips 'ends' when all ships are on the board\n * \n * @param {Object} gameBoard \n */\nconst renderShips = (gameBoard) => {\n\n    let shipCount = 0; //counts number of ships on the board\n\n    const shipsContainer = document.querySelector(\".ships-container\")\n    const content = document.querySelector(\".content\")\n    const myBoard = document.querySelector(\".board.one\");\n\n    let index = \"\"; //cell chosen by player to hold ship by\n    let currentShip = \"\"; //ship selected\n    let location = {    //coordinates\n        target : \"\",\n        x : \"\",\n        y : \"\",\n    }\n\n    // ================= Helper Functions ========================= //\n\n    const getShipIndex = () => {\n        //get index of ship on clicking a part of ship\n        shipsContainer.addEventListener(\"mousedown\" , (e) => {\n            if(e.target.className === 'cell ship'){\n                index = e.target.innerHTML;\n            }\n        })\n    }\n\n    const changeShipOrientation = () => {\n        //double click a ship to turn it horizontal or vertical\n        shipsContainer.addEventListener(\"dblclick\", (e) => {\n            \n            if(e.target.className === 'cell ship'){\n                (e.target.parentElement.classList[1] === 'vertical') ?\n                    makeHorizontal(e.target.parentElement) :\n                    makeVertical(e.target.parentElement);\n            }\n        })\n    }\n\n    const getShip = () => {\n        shipsContainer.addEventListener(\"dragstart\", (e) => {\n            currentShip = e.target;\n        })\n    }\n\n    const getBoardLocation = () => {\n        //when cursor enters a grid block \n        content.addEventListener(\"dragenter\", (e) => {\n            if(e.target.className === 'cell'){\n                location.target = e.target.innerHTML;\n                location.x = location.target.at(0);\n                location.y = location.target.at(1);\n\n                if(location.x === '0'){\n                    location.target = location.target.at(1);\n                }      \n                e.target.style.backgroundColor = \"aqua\";\n                if(currentShip.classList[1] === 'vertical'){\n\n                    (e.target.innerHTML.at(0) > 0) ? location.x = parseInt(location.x) - parseInt(index) \n                    : location.x = parseInt(location.x);\n\n                    location.y = parseInt(location.y);\n\n                \n                }\n                else if(currentShip.classList[1] === 'horizontal'){\n\n                    (e.target.innerHTML.at(1) > 0) ? location.y = parseInt(location.y) - parseInt(index) \n                    : location.y = parseInt(e.target.innerHTML.at(1));\n\n                    location.x = parseInt(location.x);\n                }\n            }\n            else {\n\n                location.target = \"\";\n                location.x = \"\";\n                location.y = \"\";\n                \n            }\n        })\n\n    }\n\n    const updateLocation = () => {\n        myBoard.addEventListener(\"dragleave\", (e) => {\n\n            if(e.target.className === \"cell\"){\n                e.target.style.backgroundColor = \"\";\n            }\n        })\n    }\n\n    const renderShip = (myShip, x, y, align = 'vertical') => {\n        if(x === 0){\n            x = \"\";\n        }\n        let coord = parseInt(x.toString() + y.toString());\n\n        let count = 0;\n        while(count < myShip.children.length) {\n            if(align === 'vertical'){\n                myBoard.children[coord].classList.add(myShip.classList[0]);\n                coord += 10;\n            }\n            else if(align === 'horizontal'){\n                myBoard.children[coord].classList.add(myShip.classList[0]);\n                coord += 1;\n            }\n            count++;\n        }\n\n    }\n\n    const setShip = () => {\n        //when user chooses a place to place ship\n        content.addEventListener(\"dragend\", (e) => {\n            //we place ship\n            //if valid, ship disappears from display onto board\n            //else we start all over\n            if(location.target !== \"\"){\n\n                let shipIndex = gameBoard.ships.findIndex(e => e.name === currentShip.classList[0]);\n                if(gameBoard.placeShip(gameBoard.ships[shipIndex], location.x,\n                                        location.y, currentShip.classList[1])){\n                                            \n                    renderShip(currentShip, location.x, location.y, currentShip.classList[1]);\n                    currentShip.style.display = 'none';\n                    shipCount++;\n                }\n                myBoard.children[location.target].style.backgroundColor = \"\";\n            }\n\n            //if all ships are placed, reveal enemy board\n            if(shipCount === 5){\n                let compDisplay = document.querySelector(\".playerTwo\");\n                compDisplay.style.display = ``;\n                instructions.gameInstructions();\n                shipCount = 0;\n                toggleBoardOpacity(compDisplay.previousSibling.lastChild); //.board.one\n                shipsContainer.remove();\n            }\n            reset();\n        })\n    }\n\n    //reset all parameters\n    const reset = () => {\n\n        currentShip = \"\";\n        location.target = \"\";\n        location.x = \"\";\n        location.y = \"\";\n        index = \"\";\n    }\n\n    // ===================== Event Listeners ==================== //\n    \n    getShipIndex();\n    getShip();\n    changeShipOrientation();\n    getBoardLocation();        \n    updateLocation();\n    setShip();\n}\n\nexport {renderShips}\n","\n/**\n* Module\n* @description          The algorithm for the computer to attack\n*                       1) The computer makes a \"choice\" \n*                       2) If the board tile is already hit, reroll\n*                       3) If there are no previous valid hits, add the first success to moveList\n*                       4) If there was a previous hit, check in the 4 cardinal directions for another hit \n*                       5) Rinse and repeat until all ships are sunk\n *          \n * @returns { smartMove }\n */\nconst computerAttack =(() => {\n\n    const moveList = [];\n    let count = 0; //see @checkAround\n\n    /**\n     * Method\n     * @description                 The algorithm gets a coordinate (choice); since a ship has a minimum length of 2\n     *                              the choice needs to only be 'every other' grid cell (ie [0,0], [0,2]...[1,1], [1,3]).\n     *                              The algorithm uses this choice to target a grid cell, but if it has been already targeted\n     *                              it recursively runs the function until a valid cell is found, and attacks the cell, adding\n     *                              the choice to the moveList. If there are no previous moves found on the moveList, the algorithm \n     *                              then 'checkAround' for its next target.\n     * \n     * @param {Object} player       The player \n     * @param {Object} enemyBoard   The board the player attacks\n     */\n    const smartMove = (player, enemyBoard) => {\n        \n        let choice = {\n            \n            x : Math.floor(Math.random() * 10),\n            y : Math.floor(Math.random() * 10),\n            \n        }\n        \n        //x is even -> y must be even\n        if(choice.x % 2 === 0){\n            while(choice.y % 2 !== 0){\n                choice.y = Math.floor(Math.random() * 10);\n            }\n        }\n        //x is odd -> y must be odd\n        else { \n            while(choice.y % 2 === 0){\n                choice.y = Math.floor(Math.random() * 10);\n            }\n        }\n        \n        //if the cell has already been hit, run smartMove again\n        if(enemyBoard.myBoard[choice.x][choice.y].status !== 0){\n            return smartMove(player, enemyBoard);\n        }\n        \n        if(moveList.length === 0) {\n            let attackStatus = player.attack(enemyBoard, choice.x, choice.y);\n            if(attackStatus.hit){\n                moveList.push(choice);\n                renderAttack(choice, attackStatus);\n                return;\n            }\n            else {\n                renderAttack(choice, attackStatus);\n                return;\n            }\n        }\n        else{ //if there are previous valid moves (there has been a successful hit before) \n\n            checkAround(player, enemyBoard, moveList[moveList.length - 1].x,\n                moveList[moveList.length - 1].y);\n            return;    \n        }\n    }\n    \n    /**\n     * Helper Function\n     * @description                 Using the most recent hit in moveList, the next move is chosen\n     *                              by iterating through a direction array that dictates the \n     *                              cardinal direction the computer will choose next, until it misses.\n     *                              Then the moveList is reversed to get the initial position and move up\n     *                              in the direction array and repeats the step above. If a ship is sunk\n     *                              from the latest attack, @renderAttack deletes the cooresponding coordinates\n     *                              from moveList and does the above with, if any, remaining moves.\n     * \n     * @param {Object} computer     The computer player object\n     * @param {Object} playerBoard  The player board object\n     * @param {Number} x            x-coordinate of the board to attack (most recent move in moveList)\n     * @param {Number} y            y-coordinate of the board to attack (most recent move in moveList)\n     */\n    const checkAround = (computer, playerBoard, x, y) => {\n    \n        //count (in computerAttack) iterate through direction\n        const direction = [\"up\", \"down\", \"left\", \"right\"];\n        const up = x - 1;\n        const down = x + 1;\n        const left = y - 1;\n        const right = y + 1;\n        let choice = {\n            x : x, \n            y : y,\n        }\n        \n        if(direction[count] === \"up\"){\n            if(x > 0 && playerBoard.myBoard[up][y].status === 0){ //'empty' cell\n                choice.x = up;\n                let attackStatus = computer.attack(playerBoard, up, y);\n                if(attackStatus.hit){\n                    moveList.push(choice); //add to list \n                    renderAttack(choice, attackStatus);\n                }\n                else { //hit was miss\n                    moveList.reverse(); //reverses only in \"up\"/\"left\" to correspond with \"down\"/\"right\"\n                    renderAttack(choice, attackStatus);\n                    count++;\n                }\n            }\n            else { //cell is out of bounds or cell has already been hit\n                moveList.reverse();\n                count++;\n                smartMove(computer, playerBoard);\n            }\n            \n        }\n    \n        else if(direction[count] === \"down\"){\n            if(x < 9 && playerBoard.myBoard[down][y].status === 0 ){ \n                choice.x = down;\n                let attackStatus = computer.attack(playerBoard, down, y);\n                if(attackStatus.hit){\n                    moveList.push(choice);\n                    renderAttack(choice, attackStatus);\n                }\n                else {\n                    renderAttack(choice, attackStatus);\n                    count++;\n                }\n            }\n            else {\n                count++;\n                smartMove(computer, playerBoard);\n            }\n        }\n    \n        else if(direction[count] === \"left\"){\n            if(y > 0 && playerBoard.myBoard[x][left].status === 0){\n                choice.y = left;\n                let attackStatus = computer.attack(playerBoard, x, left);\n                if(attackStatus.hit){\n                    moveList.push(choice);\n                    renderAttack(choice, attackStatus);\n                }\n                else {\n                    moveList.reverse();\n                    renderAttack(choice, attackStatus);\n                    count++;\n                }\n            }\n            else {\n                moveList.reverse();\n                count++;\n                smartMove(computer, playerBoard);\n            }\n        }\n\n        else if(direction[count] === \"right\"){\n            if(y < 9 && playerBoard.myBoard[x][right].status === 0 ){\n                choice.y = right;\n                let attackStatus = computer.attack(playerBoard, x, right);\n                if(attackStatus.hit){\n                    moveList.push(choice);\n                    renderAttack(choice, attackStatus);\n                }\n                else {\n                    renderAttack(choice, attackStatus);\n                    count++;\n                }\n            }\n            else {\n                count = 0;\n                smartMove(computer, playerBoard);\n            }\n        }\n        else {\n                while(moveList.length !== 0){\n                    moveList.pop();\n                }\n                count = 0;\n                smartMove(computer, playerBoard);\n        }\n        return;\n    }\n    \n    /**\n     * Helper Function\n     * @description    Renders whether the attack was a hit or miss and adds to the classList\n     *                 accordinly. If the ship is sunk, gets all coordinates and adds to the \n     *                 classList accordingly. Removes all ship coordinates in moveList\n     *                 that corespond with the sunken ship.\n     * \n     * @param {Object} choice coordinates\n     * @param {Object} status Status of ship to check if sunk\n     */\n    const renderAttack = (choice, status) => {\n    \n        const playerBoardDisplay = document.querySelector('.board.one');\n        let x = choice.x;\n        let y = choice.y;\n    \n        if(choice.x === 0){\n            x = \"\";\n        }\n    \n        let currentCoord = parseInt(x.toString() + y.toString());\n    \n        if(status.hit){\n            if(status.sunk){\n                for(let i = 0; i < status.sunkCoord.length; i++){\n                    let sunkenCoord = status.sunkCoord[i];\n                    playerBoardDisplay.childNodes.item(sunkenCoord)\n                        .classList.add(\"sunk\");\n                    \n                    //resetMoveList\n                    if(sunkenCoord < 10){\n                        moveList.splice(moveList.indexOf({\n                            x: '0',\n                            y: sunkenCoord.toString(),\n                        }), 1)\n                    }else {\n                        let convertSunkenCoord = sunkenCoord.toString();\n                        moveList.splice(moveList.indexOf({\n                            x: convertSunkenCoord.charAt(0),\n                            y: convertSunkenCoord.charAt(1),\n                        }), 1)\n                    }\n                }\n                count = 0;\n            }\n            else {\n    \n                playerBoardDisplay.children[currentCoord].classList.add(\"hit\");\n    \n            }\n        }\n        else {\n            \n            playerBoardDisplay.children[currentCoord].classList.add(\"miss\");\n    \n        }\n    }\n    \n    return {\n        smartMove\n    }\n})();\n\n/**\n * @description                     Randomly places ships on the board  \n * \n * @param {Object} computerBoard    The computer board\n */\nconst compPlaceShips = (computerBoard) => {\n\n    let placeCount = 0;\n    while(placeCount < 5){\n        let alignment = Math.floor(Math.random() * 2); \n        (alignment === 0) ? alignment = 'vertical' : alignment = 'horizontal';\n        if(computerBoard.placeShip(computerBoard.ships[placeCount],\n                                    Math.floor(Math.random() * 10),\n                                    Math.floor(Math.random() * 10),\n                                    alignment))\n        {\n            placeCount++;\n        }\n    }\n}\n\nexport default computerAttack;\nexport { compPlaceShips }","import { getShips } from \"./renderShips/displayShips\";\nimport instructions from './instructions';\nconst { makeTitle } = require(\"./header\");\nconst { makeBoards } = require(\"./boards\")\n\n\n/**\n * @description     Consolidates game creation into\n *                      1) header (title)\n *                      2) body (boards, ships, and instructions)\n */\nconst init = () => {\n    \n    const content = document.createElement(\"div\");\n    content.className = \"content\";\n    document.body.appendChild(content);\n\n    content.appendChild(makeTitle());\n    content.appendChild(makeBoards());\n    content.appendChild(getShips());\n    content.appendChild(instructions.shipInstructions());\n    \n}\n\nexport {init}","import { init } from '../UI/init'\nimport { gameLoop } from './gameLoop';\n\n/**\n * @description              Creates a modal that declares winner and asks the player to \n *                           restart the game\n * \n * @param {Object} player \n */\nconst announceWinner = (player) => {\n\n    const content = document.querySelector(\".content\");\n\n    const myModal = document.createElement(\"div\");\n    myModal.id = \"myModal\";\n    myModal.className = \"modal\";\n\n    const modalContent = document.createElement(\"div\");\n    modalContent.className = \"modal-content\";\n\n    const winner = document.createElement(\"p\");\n    (player === \"computer\") ? winner.innerText = `You have lost the battle!`\n                            : winner.innerText = `You have defeated the enemy!`;\n\n    const restartBtn = document.createElement(\"button\");\n    restartBtn.className = \"restart\";\n    restartBtn.innerText = `Play Again?`;\n\n    content.appendChild(myModal);\n    myModal.appendChild(modalContent);\n    modalContent.appendChild(winner);\n    modalContent.appendChild(restartBtn);\n\n}\n\n\n/**\n * @description     Adds an event listener to the restart button that deletes all DOM elements\n *                  and then reinitializes the game\n */\nconst resetGame = () => {\n    const reset = document.querySelector(\".restart\");\n\n    reset.addEventListener(\"click\", () => {\n        while(document.body.lastChild){\n            document.body.removeChild(document.body.lastChild);\n        }\n        init();\n        gameLoop();\n    })\n}\n\nexport { announceWinner, resetGame }","\n/**\n * Factory Function\n * @description      This function will hold a <ships> array and create a 2D array <myBoard>\n *                   The FF includes functions that places ships on <myBoard>, receives attacks on <myBoard>,\n *                   and updates the status of <ships> depending whether or not a ship that was placed on the board\n *                   was hit, sunk, and in such, whether ALL ships in <ships> have been sunk\n * \n * @returns { ships, myBoard, placeShip, receiveAttack, isAllSunk } \n */\nconst Gameboard = () => {\n\n    //ships array to hold ships\n    const ships = [];\n\n    /**\n     * Helper Function \n     * @description         CREATE a game board object\n     * @returns tempArray   a 2D array where each 'cell' contains the ship name, ship part, and status (0 (DEFAULT) = nothing, 1 = miss, 2 = hit)\n     */\n    const createBoard = () => {\n        let tempArray = Array(10);\n        for(let i = 0; i < 10; i++){\n            tempArray[i] = Array.from({length: 10}, (e) => {\n                if(e === undefined){\n                    return e = {\n                        ship: 'none',\n                        shipPart: 'none',\n                        status: 0 \n                    }\n                }\n            })\n        }\n        return tempArray;\n    }\n    \n    //game board object\n    const myBoard = createBoard();\n\n    /**\n     * Helper Function for placeShip \n     * @description                   Check whether a ship already exists on the places on the game board myShip was to be potentially placed\n     * \n     * @param {Object} myShip         The ship object that is to be potentially placed on the game board\n     * @param {Number} x              First parameter of the 2D array, myBoard, and the x-coordinate\n     * @param {Number} y              Second parameter of the 2D array, myBoard, and the y-coordinate\n     * @param {String} align          The alignment of the ship ('vertical' or 'horizontal')\n     * @returns {Boolean}             Return TRUE if there is no coinciding ship on the board coordinates, else return FALSE\n     */\n    const noOverlap = (myShip, x, y, align) => {\n        if(align === 'horizontal'){\n            for(let i = y; i < y + myShip.length && i <= 9; i++){\n                if(myBoard[x][i].ship !== \"none\"){\n                    return false;\n                }\n            }\n        }\n        else if(align === 'vertical'){\n            for(let i = x; i < x + myShip.length && i <= 9; i++){\n                if(myBoard[i][y].ship !== \"none\"){\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Method\n     * @description                   Check whether the ship to be placed has a valid coordinate, that in its full length\n     *                                fits onto the board, and whether it overlaps with any other ships on the board\n     * \n     * @param {Object} myShip         The ship object that is to be potentially placed on the game board\n     * @param {Number} x              First parameter of the 2D array, myBoard, and the x-coordinate\n     * @param {Number} y              Second parameter of the 2D array, myBoard, and the y-coordinate\n     * @param {String} align          The alignment of the ship ('vertical' or 'horizontal')\n     * @returns {Boolean}             Return TRUE, if ship has been placed on a valid position, and return FALSE, if spot is invalid\n     */\n    const placeShip = (myShip, x, y, align) => {\n        x = parseInt(x);\n        y = parseInt(y);\n        if((x >= 0 && x <= 9) && (y >= 0 && y <= 9) && noOverlap(myShip, x, y, align)){\n            let pos = 0;\n            if(align === 'horizontal'){\n                if(y + myShip.length > 10){\n                    return false;\n                }\n                for(let i = y; i < y + myShip.length; i++){\n                    myBoard[x][i].ship = myShip.name;\n                    myBoard[x][i].shipPart = myShip.shipParts[pos].position;\n                    pos++;\n                }\n            }\n            else if(align === 'vertical') {\n                if(x + myShip.length > 10){\n\n                    return false;\n                }\n                for(let i = x; i < x + myShip.length; i++){\n                    myBoard[i][y].ship = myShip.name;\n                    myBoard[i][y].shipPart = myShip.shipParts[pos].position;\n                    pos++;\n                }\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Method\n     * @description                   Check the coordinate on the board to see if there is a ship part.\n     *                                 If there is no ship, board status changes to 1 (missed), else 2 (hit),\n     *                                 and records whether the hit sunk the ship or not and updates accordingly\n     * \n     * @param {Number} x              First parameter of the 2D array, myBoard, and the x-coordinate\n     * @param {Number} y              Second parameter of the 2D array, myBoard, and the y-coordinate\n     * @returns {status}              An object that records the ship name, hit status, sunk status, and all the\n     *                                coordinates on the board that coincide with said sunk ship, if any\n     */\n    const receiveAttack = (x, y) => {\n\n        let status = {\n            ship: \"\",\n            hit: false,\n            sunk: false,\n            sunkCoord: [],\n        }\n        if(myBoard[x][y].ship !== 'none'){\n            status.ship = myBoard[x][y].ship;\n            for(let i = 0; i < ships.length; i++){\n                if(ships[i].name === myBoard[x][y].ship){\n                    ships[i].hit(myBoard[x][y].shipPart);\n                    if(ships[i].isSunk()){\n                        status.sunk = true;\n                        status.sunkCoord = [...getShip(ships[i].name)];\n                    }\n                }\n            }\n            myBoard[x][y].status = 2;\n            status.hit = true;\n            return status;\n        }\n        else {\n            myBoard[x][y].status = 1;\n            return status;\n        }\n    }\n\n    /**\n     * Helper Function\n     * @description                 Get the coordinates of a ship\n     * @param {String} shipName     The name of the ship\n     * @returns {coords}            An array of coordinates (0 -> 99)\n     */\n    const getShip = (shipName) => {\n        let coords = [];\n        myBoard.flat().forEach((cell, index) => {\n            if(cell.ship === shipName){\n                coords.push(index);\n            }\n        })\n        return coords;\n    }\n\n    /**\n     * Method\n     * @description         Check whether all the ships on the board are sunk\n     * @returns {Boolean}   Returns a boolean based on the above\n     */\n    const isAllSunk = () => {\n        return (ships.every(e => e.isSunk() === true));\n    }\n\n    return {\n        ships,\n        myBoard,\n        placeShip,\n        receiveAttack,\n        isAllSunk\n    }\n}\n\nexport default Gameboard;","/**\n * Factory Function\n * @description             The ship object to be placed on the game board\n *                          Include individual ship parts to coincide with grid coordinate\n *                          Each ship part has a status and position\n * \n * @param {String} name     name of the ship\n * @param {Number} length   length of the ship\n * @returns {name, length, shipParts, hit, isSunk}\n */\n\nconst Ship = (name, length) => {\n    \n    //array that uses length of ship to create a collection of ship parts\n    const shipParts = Array.apply(null, Array(length))\n        .map(function (x, i) { \n            x = {                   //status\n                \"isHit\" : false, \n                \"position\" : i\n            }\n            return x;\n        }\n    ); \n\n    /**\n     * Method\n     * @description         Changes status of ship part from 'not hit' to 'hit'\n     * \n     * @param {Number} pos  position of ship part\n     * @returns {Boolean}   Return TRUE, if hit\n     */\n    const hit = (pos) => {\n        if(shipParts[pos].isHit === false) {\n            shipParts[pos].isHit = true;\n            return true;\n        }\n    }\n    \n    /**\n     * Method\n     * @description         Filters through each shipPart, and if all art hit, then ship is sunk\n     * \n     * @returns {Boolean}   Return TRUE, if all parts are hit, else return FALSE\n     */\n    const isSunk = () => {\n        if(shipParts.filter((e) => {return e.isHit === true}).length === length) {\n            return true;\n        }\n        else {return false;}\n    }\n\n    return {\n        name,\n        length,\n        shipParts,\n        hit,\n        isSunk,\n    }\n}\n\nexport default Ship;","import Gameboard from \"../factory/gameBoard\";\nimport Ship from \"../factory/ship\";\n\n/**\n * @description         Creates a gameBoard object and fills the \n *                      ships array with standard Battleship Ships\n * \n * @returns { board }   Returns the gameBoard with updated ships\n */\nconst createBoard = () => {\n    \n    const board = Gameboard();\n\n    const carrier = Ship('carrier', 5);\n    const battleship = Ship('battleship', 4);\n    const cruiser = Ship('cruiser', 3);\n    const submarine = Ship('submarine', 3);\n    const destroyer = Ship('destroyer', 2);\n\n    board.ships.push(carrier);\n    board.ships.push(battleship);\n    board.ships.push(cruiser);\n    board.ships.push(submarine);\n    board.ships.push(destroyer);\n    \n    return board;\n}\n\nexport default createBoard;","\nimport Player from \"../factory/player\";\nimport { renderShips } from \"../UI/renderShips/placeShips\";\nimport computerAttack, { compPlaceShips} from \"./computerAI\";\nimport { announceWinner, resetGame } from \"./gameEnd\"\nimport createBoard from \"./createBoard\";\nimport { toggleBoardOpacity } from \"../UI/boards\";\n\n\n/**\n * @description     Creates players, boards, and boards display, and \n *                  allows players to place ships onto their board.\n *                  The game begins when the computer's board is displayed, which\n *                  is after the player places all his ships, and continues until\n *                  either players lose all ships\n */\nconst gameLoop = () => {\n    \n    const playerOne = Player();\n    const playerOneBoard = createBoard();\n    const playerBoardDOM = document.querySelector(\".board.one\")\n    playerOne.myTurn = true; //player always starts game going first\n    \n    const computer = Player();\n    const computerBoard = createBoard();\n    const computerBoardDOM = document.querySelector(\".board.two\");\n\n    compPlaceShips(computerBoard);\n    renderShips(playerOneBoard);\n    \n    computerBoardDOM.addEventListener(\"mousedown\", (e) => {\n    \n        if(playerOne.myTurn){\n            const x = parseInt(e.target.innerHTML.at(0));\n            const y = parseInt(e.target.innerHTML.at(1));\n\n            //If the cell is not empty, return out of this instance of the event listener\n            if(e.target.classList[1] === \"miss\" || e.target.classList[1] === \"hit\"){\n                return;\n            }\n            else {\n                toggleBoardOpacity(playerBoardDOM); //highlight player board\n                toggleBoardOpacity(computerBoardDOM); //dim computer board\n\n                //if 'fresh' cell then attack\n                let attackStatus = playerOne.attack(computerBoard, x, y);\n\n                //update board of ship status\n                if(attackStatus.hit){\n                    if(attackStatus.sunk){\n                        for(let i = 0; i < attackStatus.sunkCoord.length; i++){\n                            e.target.parentElement.childNodes.item(attackStatus.sunkCoord[i])\n                                .classList.add(\"sunk\");\n                        }\n                    }\n                    else {\n                        e.target.classList.add(\"hit\");\n                    }\n                }\n                else {\n                    e.target.classList.add(\"miss\");\n                }\n            }\n            \n            computer.myTurn = true; //computer turn\n            //if player wins return out of event listener instance\n            if(computerBoard.isAllSunk()){\n                announceWinner(\"player\");\n                return resetGame();\n            }\n        }\n\n\n        if(computer.myTurn){\n\n            //delay to mimic computer 'thinking'\n            setTimeout(() => {\n                computerAttack.smartMove(computer, playerOneBoard);\n                toggleBoardOpacity(playerBoardDOM); //dim player board\n                toggleBoardOpacity(computerBoardDOM); //highlight computer board\n                if(playerOneBoard.isAllSunk()){\n                    announceWinner(\"computer\");\n                    return resetGame();\n                }\n            }, 500)\n\n            playerOne.myTurn = true;\n        }\n    })\n\n}\n\nexport {gameLoop}","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!./main.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!./main.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!./normalize.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!./normalize.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { gameLoop } from './scripts/game_loop/gameLoop';\nimport { init } from './scripts/UI/init';\nimport  './styles/main.css';\nimport './styles/normalize.css';\n\nconst runApp = (() => {\n    init();\n    gameLoop();\n})();"],"names":[],"sourceRoot":""}